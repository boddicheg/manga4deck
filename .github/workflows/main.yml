name: "publish"

on:
  pull_request:
    types: [closed]

# `tauri-action` can also upload app bundles to an existing GitHub release.
# This workflow uses different actions to create and publish the release.
# `tauri-action` will only build and upload the app bundles to the specified release.

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Manga4Deck v${process.env.PACKAGE_VERSION}`,
              body: 'Test build',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: "macos-latest" # for Arm based macs (M1 and above).
          #   args: "--target aarch64-apple-darwin"
          # - platform: "macos-latest" # for Intel based macs.
          #   args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-latest" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          # - platform: "windows-latest"
          #   args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
            sudo apt update;
            sudo apt install -y \
              build-essential \
              curl \
              wget \
              file \
              libssl-dev \
              libgtk-3-dev \
              libappindicator3-dev \
              librsvg2-dev;
            sudo apt install -y \
              libwebkit2gtk-4.1-0=2.44.0-2 \
              libwebkit2gtk-4.1-dev=2.44.0-2 \
              libjavascriptcoregtk-4.1-0=2.44.0-2 \
              libjavascriptcoregtk-4.1-dev=2.44.0-2 \
              gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
              gir1.2-webkit2-4.1=2.44.0-2;
      - name: install frontend dependencies
        run: npm install
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
